/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Subtask } from "./Subtask";
import { SubtaskCountArgs } from "./SubtaskCountArgs";
import { SubtaskFindManyArgs } from "./SubtaskFindManyArgs";
import { SubtaskFindUniqueArgs } from "./SubtaskFindUniqueArgs";
import { DeleteSubtaskArgs } from "./DeleteSubtaskArgs";
import { SubtaskService } from "../subtask.service";
@graphql.Resolver(() => Subtask)
export class SubtaskResolverBase {
  constructor(protected readonly service: SubtaskService) {}

  async _subtasksMeta(
    @graphql.Args() args: SubtaskCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Subtask])
  async subtasks(
    @graphql.Args() args: SubtaskFindManyArgs
  ): Promise<Subtask[]> {
    return this.service.subtasks(args);
  }

  @graphql.Query(() => Subtask, { nullable: true })
  async subtask(
    @graphql.Args() args: SubtaskFindUniqueArgs
  ): Promise<Subtask | null> {
    const result = await this.service.subtask(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Subtask)
  async deleteSubtask(
    @graphql.Args() args: DeleteSubtaskArgs
  ): Promise<Subtask | null> {
    try {
      return await this.service.deleteSubtask(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
